---
# The template creates the spider application and a mariadb instance.

apiVersion: v1
kind: Template
labels:
  template: readytoinnovate-template
message: |-
  The following service(s) have been created in your project: 
        
        ${DATABASE_SERVICE_NAME}.
        ${APP_NAME}.
        
         Username: ${MYSQL_USER}
         Password: ${MYSQL_PASSWORD}
    Database Name: ${MYSQL_DATABASE}
   Connection URL: mysql://${DATABASE_SERVICE_NAME}:3306/

metadata:
  annotations:
    description: |-
      A DevOps assessment application.

      NOTE: Scaling to more than one replica is not supported. You must have persistent volumes available in your cluster to use this template.
    iconClass: icon-mariadb
    openshift.io/display-name: Ready-To-Innovate
    openshift.io/documentation-url: "https://github.com/pstiebel/spider"
    openshift.io/long-description: A DevOps assessment application.
    openshift.io/provider-display-name: Devoteam GmbH
    openshift.io/support-url: https://example.com
    tags: database,mariadb
  name: readytoinnovate
  
# object list
objects:

# secret
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-database_name: "{.data['database_name']}"
      template.openshift.io/expose-password: "{.data['database_password']}"
      template.openshift.io/expose-root_password: "{.data['database_root_password']}"
      template.openshift.io/expose-username: "{.data['database_user']}"
    name: "${DATABASE_SERVICE_NAME}"
  stringData:
    database_name: "${MYSQL_DATABASE}"
    database_password: "${MYSQL_PASSWORD}"
    database_root_password: "${MYSQL_ROOT_PASSWORD}"
    database_user: "${MYSQL_USER}"
    
# database service
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: mysql://{.spec.clusterIP}:{.spec.ports[?(.name=="mariadb")].port}
    name: "${DATABASE_SERVICE_NAME}"
  spec:
    ports:
    - name: mariadb
      port: 3306
    selector:
      name: "${DATABASE_SERVICE_NAME}"
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "${VOLUME_CAPACITY}"

# service definition for application service    
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: "Exposes the application."
    name: "${APP_NAME}"
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: 8443-tcp
      port: 8443
      protocol: TCP
      targetPort: 8443
    selector:
      app: "${APP_NAME}"
      deploymentconfig: "${APP_NAME}"
        
# DeploymentConfig for mariadb
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: "${DATABASE_SERVICE_NAME}"
  spec:
    replicas: 1
    selector:
      name: "${DATABASE_SERVICE_NAME}"
    strategy:
      type: Recreate
      recreateParams:
        post:
          execNewPod:
            command:
            - /bin/sh
            - -c
            - hostname && sleep 10 && /opt/rh/rh-mariadb102/root/usr/bin/mysql -h $MARIADB_SERVICE_HOST -u $MYSQL_USER -p$MYSQL_PASSWORD -D $MYSQL_DATABASE -e 'CREATE TABLE IF NOT EXISTS users (id int(8) NOT NULL AUTO_INCREMENT, name varchar(30) NOT NULL, email varchar(60) NOT NULL, password varchar(40) NOT NULL, PRIMARY KEY (id), UNIQUE KEY email (email)) ENGINE=MyISAM DEFAULT CHARSET=latin1 AUTO_INCREMENT=1;' && sleep 60
            - /bin/sh
            - -c
            - hostname && sleep 10 && /opt/rh/rh-mariadb102/root/usr/bin/mysql -h $MARIADB_SERVICE_HOST -u $MYSQL_USER -p$MYSQL_PASSWORD -D $MYSQL_DATABASE -e 'CREATE TABLE IF NOT EXISTS data (id int(3) NOT NULL AUTO_INCREMENT, client varchar(50) NOT NULL, o1 int(1) NOT NULL, o2 int(1) NOT NULL, o3 int(1) NOT NULL, o4 int(1) NOT NULL, o5 int(1) NOT NULL, d1 int(1) NOT NULL, d2 int(1) NOT NULL, d3 int(1) NOT NULL, d4 int(1) NOT NULL, d5 int(1) NOT NULL, hash varchar(50) NOT NULL, date timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (id), UNIQUE KEY hash (hash)) ENGINE=InnoDB AUTO_INCREMENT=283 DEFAULT CHARSET=latin1;' && sleep 60
            containerName: "${DATABASE_SERVICE_NAME}"
          failurePolicy: ignore
    template:
      metadata:
        labels:
          name: "${DATABASE_SERVICE_NAME}"
      spec:
        containers:
        - env:
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                key: database_user
                name: "${DATABASE_SERVICE_NAME}"
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database_password
                name: "${DATABASE_SERVICE_NAME}"
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database_root_password
                name: "${DATABASE_SERVICE_NAME}"
          - name: MYSQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database_name
                name: "${DATABASE_SERVICE_NAME}"
          image: " "
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 3306
            timeoutSeconds: 1
          name: mariadb
          ports:
          - containerPort: 3306
          readinessProbe:
            exec:
              command:
              - "/bin/sh"
              - "-i"
              - "-c"
              - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE
                -e 'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            limits:
              memory: "${MEMORY_LIMIT}"
              cpu: "${CPU_LIMIT}"
          volumeMounts:
          - mountPath: "/var/lib/mysql/data"
            name: "${DATABASE_SERVICE_NAME}-data"
        volumes:
        - name: "${DATABASE_SERVICE_NAME}-data"
          persistentVolumeClaim:
            claimName: "${DATABASE_SERVICE_NAME}"
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mariadb
        from:
          kind: ImageStreamTag
          name: mariadb:${MARIADB_VERSION}
          namespace: "${NAMESPACE}"
      type: ImageChange
    - type: ConfigChange

# deployment config for application container
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    name: "${APP_NAME}"
  spec:
    replicas: 1
    selector:
      app: "${APP_NAME}"
      deploymentconfig: "${APP_NAME}"
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: "${APP_NAME}"
          deploymentconfig: "${APP_NAME}"
      spec:
        containers:
        - env:
          - name: OPENSHIFT_MYSQL_DB_USERNAME
            valueFrom:
              secretKeyRef:
                key: database_user
                name: "${DATABASE_SERVICE_NAME}"
          - name: OPENSHIFT_MYSQL_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database_password
                name: "${DATABASE_SERVICE_NAME}"
          - name: OPENSHIFT_MYSQL_DB_HOST
            value: "${DATABASE_SERVICE_NAME}"
          - name: OPENSHIFT_MYSQL_DB_NAME
            value: "${MYSQL_DATABASE}"
          envFrom:
          - secretRef:
              name: "${DATABASE_SERVICE_NAME}"
          imagePullPolicy: Always
          name: "${APP_NAME}"
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8443
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - "${APP_NAME}"
        from:
          kind: ImageStreamTag
          name: "${APP_NAME}:latest"
      type: ImageChange

# build config for application container
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    annotations:
      description: "Defines how to build the application."
    name: "${APP_NAME}"
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: "${APP_NAME}:latest"
    runPolicy: Serial
    source:
      git:
        uri: "${SOURCE_REPOSITORY_URL}"
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag  
          name: php:latest        # php-version might be set using a template paramter here as well 
          namespace: openshift    # namespace for imagestream might be set using a template paramter here as well
      type: Source
    successfulBuildsHistoryLimit: 5
    triggers: # git web hook might be added here as well
    - type: ConfigChange
    - type: ImageChange

# imagestream definition for application 
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: "${APP_NAME}"
    
    
# route definition for exposed application service        
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    name: "${APP_NAME}"
  spec:
    host: 
    port:
      targetPort: 8443-tcp
    to:
      kind: Service
      name: "${APP_NAME}"
    
# Parameter list
parameters:
- description: Maximum amount of memory the container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 256Mi
  
- description: Maximum amount of cpu the container can use (e.g. 100m = 0.1 CPU units).
  displayName: CPU Limit
  name: CPU_LIMIT
  required: true
  value: 100m
  
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  value: openshift
  
- description: The name of the OpenShift Service exposed for the database.
  displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: mariadb
  
- description: Username for MariaDB user that will be used for accessing the database.
  displayName: MariaDB Connection Username
  from: user[A-Z0-9]{3}
  generate: expression
  name: MYSQL_USER
  required: true
  
- description: Password for the MariaDB connection user.
  displayName: MariaDB Connection Password
  from: "[a-zA-Z0-9]{16}"
  generate: expression
  name: MYSQL_PASSWORD
  required: true
  
- description: Password for the MariaDB root user.
  displayName: MariaDB root Password
  from: "[a-zA-Z0-9]{16}"
  generate: expression
  name: MYSQL_ROOT_PASSWORD
  required: true
  
- description: Name of the MariaDB database accessed.
  displayName: MariaDB Database Name
  name: MYSQL_DATABASE
  required: true
  value: sampledb
  
- description: Version of MariaDB image to be used (10.1, 10.2 or latest).
  displayName: Version of MariaDB Image
  name: MARIADB_VERSION
  required: true
  value: 'latest'
  
- description: Volume space available for data, e.g. 512Mi, 2Gi.
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 1Gi
  
- name: APP_NAME
  description: "The name of the application"
  value: spiderapp
  required: true
  displayName: Application Name
  
- name: SOURCE_REPOSITORY_URL
  description: "The URL of the repository with your application source code."
  displayName: "Git Repository URL"
  value: https://github.com/pstiebel/spider.git
  required: true
